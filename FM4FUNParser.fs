// Implementation file for parser generated by fsyacc
module FM4FUNParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "FM4FUNParser.fsp"

open FM4FUNAST

# 10 "FM4FUNParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ASSIGN
  | SKIP
  | SEP
  | IF
  | FI
  | DO
  | OD
  | THEN
  | CONS
  | LBRA
  | RBRA
  | PLUS
  | MINUS
  | MULT
  | DIV
  | POW
  | LPAR
  | RPAR
  | TRUE
  | FALSE
  | AND
  | OR
  | SAND
  | SOR
  | NEQ
  | GEQ
  | LEQ
  | EQ
  | GT
  | LT
  | NOT
  | EOF
  | VAR of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_SEP
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_THEN
    | TOKEN_CONS
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_NEQ
    | TOKEN_GEQ
    | TOKEN_LEQ
    | TOKEN_EQ
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_NOT
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_C
    | NONTERM_Ca
    | NONTERM_GC
    | NONTERM_GCa
    | NONTERM_a0
    | NONTERM_a1
    | NONTERM_a2
    | NONTERM_a3
    | NONTERM_b0
    | NONTERM_b1
    | NONTERM_b2

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ASSIGN  -> 0 
  | SKIP  -> 1 
  | SEP  -> 2 
  | IF  -> 3 
  | FI  -> 4 
  | DO  -> 5 
  | OD  -> 6 
  | THEN  -> 7 
  | CONS  -> 8 
  | LBRA  -> 9 
  | RBRA  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | MULT  -> 13 
  | DIV  -> 14 
  | POW  -> 15 
  | LPAR  -> 16 
  | RPAR  -> 17 
  | TRUE  -> 18 
  | FALSE  -> 19 
  | AND  -> 20 
  | OR  -> 21 
  | SAND  -> 22 
  | SOR  -> 23 
  | NEQ  -> 24 
  | GEQ  -> 25 
  | LEQ  -> 26 
  | EQ  -> 27 
  | GT  -> 28 
  | LT  -> 29 
  | NOT  -> 30 
  | EOF  -> 31 
  | VAR _ -> 32 
  | NUM _ -> 33 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ASSIGN 
  | 1 -> TOKEN_SKIP 
  | 2 -> TOKEN_SEP 
  | 3 -> TOKEN_IF 
  | 4 -> TOKEN_FI 
  | 5 -> TOKEN_DO 
  | 6 -> TOKEN_OD 
  | 7 -> TOKEN_THEN 
  | 8 -> TOKEN_CONS 
  | 9 -> TOKEN_LBRA 
  | 10 -> TOKEN_RBRA 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_MULT 
  | 14 -> TOKEN_DIV 
  | 15 -> TOKEN_POW 
  | 16 -> TOKEN_LPAR 
  | 17 -> TOKEN_RPAR 
  | 18 -> TOKEN_TRUE 
  | 19 -> TOKEN_FALSE 
  | 20 -> TOKEN_AND 
  | 21 -> TOKEN_OR 
  | 22 -> TOKEN_SAND 
  | 23 -> TOKEN_SOR 
  | 24 -> TOKEN_NEQ 
  | 25 -> TOKEN_GEQ 
  | 26 -> TOKEN_LEQ 
  | 27 -> TOKEN_EQ 
  | 28 -> TOKEN_GT 
  | 29 -> TOKEN_LT 
  | 30 -> TOKEN_NOT 
  | 31 -> TOKEN_EOF 
  | 32 -> TOKEN_VAR 
  | 33 -> TOKEN_NUM 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_C 
    | 3 -> NONTERM_C 
    | 4 -> NONTERM_Ca 
    | 5 -> NONTERM_Ca 
    | 6 -> NONTERM_Ca 
    | 7 -> NONTERM_Ca 
    | 8 -> NONTERM_Ca 
    | 9 -> NONTERM_Ca 
    | 10 -> NONTERM_GC 
    | 11 -> NONTERM_GC 
    | 12 -> NONTERM_GCa 
    | 13 -> NONTERM_GCa 
    | 14 -> NONTERM_a0 
    | 15 -> NONTERM_a0 
    | 16 -> NONTERM_a0 
    | 17 -> NONTERM_a1 
    | 18 -> NONTERM_a1 
    | 19 -> NONTERM_a1 
    | 20 -> NONTERM_a2 
    | 21 -> NONTERM_a2 
    | 22 -> NONTERM_a3 
    | 23 -> NONTERM_a3 
    | 24 -> NONTERM_a3 
    | 25 -> NONTERM_a3 
    | 26 -> NONTERM_a3 
    | 27 -> NONTERM_b0 
    | 28 -> NONTERM_b0 
    | 29 -> NONTERM_b0 
    | 30 -> NONTERM_b1 
    | 31 -> NONTERM_b1 
    | 32 -> NONTERM_b1 
    | 33 -> NONTERM_b2 
    | 34 -> NONTERM_b2 
    | 35 -> NONTERM_b2 
    | 36 -> NONTERM_b2 
    | 37 -> NONTERM_b2 
    | 38 -> NONTERM_b2 
    | 39 -> NONTERM_b2 
    | 40 -> NONTERM_b2 
    | 41 -> NONTERM_b2 
    | 42 -> NONTERM_b2 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | SEP  -> "SEP" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | THEN  -> "THEN" 
  | CONS  -> "CONS" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | NEQ  -> "NEQ" 
  | GEQ  -> "GEQ" 
  | LEQ  -> "LEQ" 
  | EQ  -> "EQ" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | NOT  -> "NOT" 
  | EOF  -> "EOF" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEP  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 4us; 65535us; 0us; 2us; 5us; 6us; 22us; 23us; 30us; 31us; 4us; 65535us; 0us; 4us; 5us; 4us; 22us; 4us; 30us; 4us; 4us; 65535us; 7us; 8us; 10us; 11us; 26us; 27us; 32us; 33us; 4us; 65535us; 7us; 25us; 10us; 25us; 26us; 25us; 32us; 25us; 21us; 65535us; 7us; 38us; 10us; 38us; 14us; 15us; 16us; 17us; 19us; 20us; 26us; 38us; 32us; 37us; 60us; 35us; 64us; 36us; 65us; 37us; 68us; 38us; 70us; 38us; 73us; 38us; 75us; 38us; 80us; 38us; 82us; 39us; 83us; 40us; 84us; 41us; 85us; 42us; 86us; 43us; 87us; 44us; 23us; 65535us; 7us; 49us; 10us; 49us; 14us; 49us; 16us; 49us; 19us; 49us; 26us; 49us; 32us; 49us; 45us; 46us; 47us; 48us; 60us; 49us; 64us; 49us; 65us; 49us; 68us; 49us; 70us; 49us; 73us; 49us; 75us; 49us; 80us; 49us; 82us; 49us; 83us; 49us; 84us; 49us; 85us; 49us; 86us; 49us; 87us; 49us; 26us; 65535us; 7us; 54us; 10us; 54us; 14us; 54us; 16us; 54us; 19us; 54us; 26us; 54us; 32us; 54us; 45us; 54us; 47us; 54us; 50us; 51us; 52us; 53us; 56us; 57us; 60us; 54us; 64us; 54us; 65us; 54us; 68us; 54us; 70us; 54us; 73us; 54us; 75us; 54us; 80us; 54us; 82us; 54us; 83us; 54us; 84us; 54us; 85us; 54us; 86us; 54us; 87us; 54us; 27us; 65535us; 7us; 55us; 10us; 55us; 14us; 55us; 16us; 55us; 19us; 55us; 26us; 55us; 32us; 55us; 45us; 55us; 47us; 55us; 50us; 55us; 52us; 55us; 56us; 55us; 60us; 55us; 62us; 63us; 64us; 55us; 65us; 55us; 68us; 55us; 70us; 55us; 73us; 55us; 75us; 55us; 80us; 55us; 82us; 55us; 83us; 55us; 84us; 55us; 85us; 55us; 86us; 55us; 87us; 55us; 5us; 65535us; 7us; 28us; 10us; 28us; 26us; 28us; 32us; 29us; 65us; 67us; 7us; 65535us; 7us; 72us; 10us; 72us; 26us; 72us; 32us; 72us; 65us; 72us; 68us; 69us; 70us; 71us; 10us; 65535us; 7us; 77us; 10us; 77us; 26us; 77us; 32us; 77us; 65us; 77us; 68us; 77us; 70us; 77us; 73us; 74us; 75us; 76us; 80us; 81us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 8us; 13us; 18us; 23us; 45us; 69us; 96us; 124us; 130us; 138us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 2us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 2us; 6us; 7us; 1us; 6us; 3us; 6us; 14us; 15us; 1us; 7us; 3us; 7us; 14us; 15us; 1us; 7us; 1us; 7us; 3us; 7us; 14us; 15us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 10us; 3us; 12us; 27us; 28us; 4us; 12us; 27us; 28us; 42us; 1us; 12us; 1us; 12us; 3us; 13us; 26us; 42us; 1us; 13us; 1us; 13us; 3us; 14us; 15us; 24us; 3us; 14us; 15us; 26us; 9us; 14us; 15us; 26us; 36us; 37us; 38us; 39us; 40us; 41us; 8us; 14us; 15us; 36us; 37us; 38us; 39us; 40us; 41us; 3us; 14us; 15us; 36us; 3us; 14us; 15us; 37us; 3us; 14us; 15us; 38us; 3us; 14us; 15us; 39us; 3us; 14us; 15us; 40us; 3us; 14us; 15us; 41us; 1us; 14us; 3us; 14us; 17us; 18us; 1us; 15us; 3us; 15us; 17us; 18us; 3us; 16us; 17us; 18us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 2us; 20us; 21us; 1us; 20us; 1us; 20us; 1us; 22us; 2us; 23us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 26us; 2us; 26us; 42us; 1us; 26us; 3us; 27us; 28us; 42us; 1us; 27us; 3us; 27us; 30us; 31us; 1us; 28us; 3us; 28us; 30us; 31us; 3us; 29us; 30us; 31us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 30us; 32us; 36us; 38us; 42us; 44us; 46us; 50us; 52us; 54us; 56us; 58us; 61us; 63us; 65us; 69us; 74us; 76us; 78us; 82us; 84us; 86us; 90us; 94us; 104us; 113us; 117us; 121us; 125us; 129us; 133us; 137us; 139us; 143us; 145us; 149us; 153us; 155us; 157us; 159us; 161us; 163us; 166us; 168us; 170us; 172us; 175us; 177us; 179us; 181us; 183us; 185us; 188us; 190us; 194us; 196us; 200us; 202us; 206us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; |]
let _fsyacc_action_rows = 89
let _fsyacc_actionTableElements = [|5us; 32768us; 1us; 21us; 3us; 7us; 5us; 10us; 16us; 22us; 32us; 13us; 0us; 49152us; 1us; 32768us; 31us; 3us; 0us; 16385us; 1us; 16387us; 2us; 5us; 5us; 32768us; 1us; 21us; 3us; 7us; 5us; 10us; 16us; 22us; 32us; 13us; 0us; 16386us; 7us; 32768us; 12us; 62us; 16us; 32us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 1us; 32768us; 4us; 9us; 0us; 16388us; 7us; 32768us; 12us; 62us; 16us; 32us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 1us; 32768us; 6us; 12us; 0us; 16389us; 2us; 32768us; 0us; 14us; 9us; 16us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 2us; 16390us; 11us; 45us; 12us; 47us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 3us; 32768us; 10us; 18us; 11us; 45us; 12us; 47us; 1us; 32768us; 0us; 19us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 2us; 16391us; 11us; 45us; 12us; 47us; 0us; 16392us; 5us; 32768us; 1us; 21us; 3us; 7us; 5us; 10us; 16us; 22us; 32us; 13us; 1us; 32768us; 17us; 24us; 0us; 16393us; 1us; 16395us; 8us; 26us; 7us; 32768us; 12us; 62us; 16us; 32us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 0us; 16394us; 3us; 32768us; 7us; 30us; 21us; 70us; 23us; 68us; 4us; 32768us; 7us; 30us; 17us; 88us; 21us; 70us; 23us; 68us; 5us; 32768us; 1us; 21us; 3us; 7us; 5us; 10us; 16us; 22us; 32us; 13us; 0us; 16396us; 7us; 32768us; 12us; 62us; 16us; 32us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 1us; 32768us; 17us; 34us; 0us; 16397us; 3us; 32768us; 10us; 61us; 11us; 45us; 12us; 47us; 3us; 32768us; 11us; 45us; 12us; 47us; 17us; 66us; 9us; 32768us; 11us; 45us; 12us; 47us; 17us; 66us; 24us; 83us; 25us; 85us; 26us; 87us; 27us; 82us; 28us; 84us; 29us; 86us; 8us; 32768us; 11us; 45us; 12us; 47us; 24us; 83us; 25us; 85us; 26us; 87us; 27us; 82us; 28us; 84us; 29us; 86us; 2us; 16420us; 11us; 45us; 12us; 47us; 2us; 16421us; 11us; 45us; 12us; 47us; 2us; 16422us; 11us; 45us; 12us; 47us; 2us; 16423us; 11us; 45us; 12us; 47us; 2us; 16424us; 11us; 45us; 12us; 47us; 2us; 16425us; 11us; 45us; 12us; 47us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 2us; 16398us; 13us; 50us; 14us; 52us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 2us; 16399us; 13us; 50us; 14us; 52us; 2us; 16400us; 13us; 50us; 14us; 52us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 0us; 16401us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 0us; 16402us; 0us; 16403us; 1us; 16405us; 15us; 56us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 0us; 16404us; 0us; 16406us; 1us; 16407us; 9us; 60us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 0us; 16408us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 0us; 16409us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 7us; 32768us; 12us; 62us; 16us; 65us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 0us; 16410us; 3us; 32768us; 17us; 88us; 21us; 70us; 23us; 68us; 7us; 32768us; 12us; 62us; 16us; 65us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 2us; 16411us; 20us; 75us; 22us; 73us; 7us; 32768us; 12us; 62us; 16us; 65us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 2us; 16412us; 20us; 75us; 22us; 73us; 2us; 16413us; 20us; 75us; 22us; 73us; 7us; 32768us; 12us; 62us; 16us; 65us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 0us; 16414us; 7us; 32768us; 12us; 62us; 16us; 65us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 7us; 32768us; 12us; 62us; 16us; 65us; 18us; 78us; 19us; 79us; 30us; 80us; 32us; 59us; 33us; 58us; 0us; 16419us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 4us; 32768us; 12us; 62us; 16us; 64us; 32us; 59us; 33us; 58us; 0us; 16426us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 9us; 10us; 12us; 18us; 19us; 27us; 29us; 30us; 38us; 40us; 41us; 44us; 49us; 52us; 57us; 61us; 63us; 68us; 71us; 72us; 78us; 80us; 81us; 83us; 91us; 92us; 96us; 101us; 107us; 108us; 116us; 118us; 119us; 123us; 127us; 137us; 146us; 149us; 152us; 155us; 158us; 161us; 164us; 169us; 172us; 177us; 180us; 183us; 188us; 189us; 194us; 195us; 196us; 198us; 203us; 204us; 205us; 207us; 212us; 213us; 218us; 219us; 224us; 232us; 233us; 237us; 245us; 248us; 256us; 259us; 262us; 270us; 271us; 279us; 280us; 281us; 282us; 283us; 291us; 292us; 297us; 302us; 307us; 312us; 317us; 322us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 1us; 3us; 3us; 3us; 6us; 1us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; 4us; 2us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 16386us; 65535us; 65535us; 16388us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 16393us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 16402us; 16403us; 65535us; 65535us; 16404us; 16406us; 65535us; 65535us; 16408us; 65535us; 16409us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 16415us; 16416us; 16417us; 16418us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16426us; |]
let _fsyacc_reductions ()  =    [| 
# 317 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 326 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 27 "FM4FUNParser.fsp"
                 : cexp));
# 337 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ca)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "FM4FUNParser.fsp"
                                                         C(_1,_3) 
                   )
# 30 "FM4FUNParser.fsp"
                 : cexp));
# 349 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ca)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 31 "FM4FUNParser.fsp"
                 : cexp));
# 360 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gcexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "FM4FUNParser.fsp"
                                                         If(_2) 
                   )
# 34 "FM4FUNParser.fsp"
                 : 'Ca));
# 371 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gcexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "FM4FUNParser.fsp"
                                                         Do(_2) 
                   )
# 35 "FM4FUNParser.fsp"
                 : 'Ca));
# 382 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "FM4FUNParser.fsp"
                                                         Assign(Var(_1),_3) 
                   )
# 36 "FM4FUNParser.fsp"
                 : 'Ca));
# 394 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "FM4FUNParser.fsp"
                                                         Assign(Array(_1,_3),_6) 
                   )
# 37 "FM4FUNParser.fsp"
                 : 'Ca));
# 407 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "FM4FUNParser.fsp"
                                                         Skip 
                   )
# 38 "FM4FUNParser.fsp"
                 : 'Ca));
# 417 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "FM4FUNParser.fsp"
                                                         _2 
                   )
# 39 "FM4FUNParser.fsp"
                 : 'Ca));
# 428 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'GCa)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : gcexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "FM4FUNParser.fsp"
                                                         GC(_1,_3) 
                   )
# 42 "FM4FUNParser.fsp"
                 : gcexp));
# 440 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'GCa)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 43 "FM4FUNParser.fsp"
                 : gcexp));
# 451 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "FM4FUNParser.fsp"
                                                         Then(_1,_3) 
                   )
# 46 "FM4FUNParser.fsp"
                 : 'GCa));
# 463 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gcexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "FM4FUNParser.fsp"
                                                         _2 
                   )
# 47 "FM4FUNParser.fsp"
                 : 'GCa));
# 474 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "FM4FUNParser.fsp"
                                                         Plus(_1,_3) 
                   )
# 52 "FM4FUNParser.fsp"
                 : aexp));
# 486 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "FM4FUNParser.fsp"
                                                         Minus(_1,_3) 
                   )
# 53 "FM4FUNParser.fsp"
                 : aexp));
# 498 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 54 "FM4FUNParser.fsp"
                 : aexp));
# 509 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "FM4FUNParser.fsp"
                                                         Mult(_1,_3) 
                   )
# 57 "FM4FUNParser.fsp"
                 : 'a1));
# 521 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "FM4FUNParser.fsp"
                                                         Div(_1,_3) 
                   )
# 58 "FM4FUNParser.fsp"
                 : 'a1));
# 533 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 59 "FM4FUNParser.fsp"
                 : 'a1));
# 544 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'a2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "FM4FUNParser.fsp"
                                                         Pow(_1,_3) 
                   )
# 62 "FM4FUNParser.fsp"
                 : 'a2));
# 556 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 63 "FM4FUNParser.fsp"
                 : 'a2));
# 567 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FM4FUNParser.fsp"
                                                         Num(_1) 
                   )
# 66 "FM4FUNParser.fsp"
                 : 'a3));
# 578 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "FM4FUNParser.fsp"
                                                         V(Var(_1)) 
                   )
# 67 "FM4FUNParser.fsp"
                 : 'a3));
# 589 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "FM4FUNParser.fsp"
                                                         V(Array(_1,_3)) 
                   )
# 68 "FM4FUNParser.fsp"
                 : 'a3));
# 601 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'a3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "FM4FUNParser.fsp"
                                                         UMinus(_2) 
                   )
# 69 "FM4FUNParser.fsp"
                 : 'a3));
# 612 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "FM4FUNParser.fsp"
                                                         _2 
                   )
# 70 "FM4FUNParser.fsp"
                 : 'a3));
# 623 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'b1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "FM4FUNParser.fsp"
                                                         SOr(_1,_3) 
                   )
# 75 "FM4FUNParser.fsp"
                 : bexp));
# 635 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'b1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "FM4FUNParser.fsp"
                                                         Or(_1,_3) 
                   )
# 76 "FM4FUNParser.fsp"
                 : bexp));
# 647 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'b1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 77 "FM4FUNParser.fsp"
                 : bexp));
# 658 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'b1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'b2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "FM4FUNParser.fsp"
                                                         SAnd(_1,_3) 
                   )
# 80 "FM4FUNParser.fsp"
                 : 'b1));
# 670 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'b1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'b2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "FM4FUNParser.fsp"
                                                         And(_1,_3) 
                   )
# 81 "FM4FUNParser.fsp"
                 : 'b1));
# 682 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'b2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 82 "FM4FUNParser.fsp"
                 : 'b1));
# 693 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "FM4FUNParser.fsp"
                                                         True 
                   )
# 85 "FM4FUNParser.fsp"
                 : 'b2));
# 703 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "FM4FUNParser.fsp"
                                                         False 
                   )
# 86 "FM4FUNParser.fsp"
                 : 'b2));
# 713 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'b2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "FM4FUNParser.fsp"
                                                         Not(_2) 
                   )
# 87 "FM4FUNParser.fsp"
                 : 'b2));
# 724 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "FM4FUNParser.fsp"
                                                         Eq(_1,_3) 
                   )
# 88 "FM4FUNParser.fsp"
                 : 'b2));
# 736 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "FM4FUNParser.fsp"
                                                         Neq(_1,_3) 
                   )
# 89 "FM4FUNParser.fsp"
                 : 'b2));
# 748 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "FM4FUNParser.fsp"
                                                         Gt(_1,_3) 
                   )
# 90 "FM4FUNParser.fsp"
                 : 'b2));
# 760 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "FM4FUNParser.fsp"
                                                         Geq(_1,_3) 
                   )
# 91 "FM4FUNParser.fsp"
                 : 'b2));
# 772 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "FM4FUNParser.fsp"
                                                         Lt(_1,_3) 
                   )
# 92 "FM4FUNParser.fsp"
                 : 'b2));
# 784 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "FM4FUNParser.fsp"
                                                         Leq(_1,_3) 
                   )
# 93 "FM4FUNParser.fsp"
                 : 'b2));
# 796 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "FM4FUNParser.fsp"
                                                         _2 
                   )
# 94 "FM4FUNParser.fsp"
                 : 'b2));
|]
# 808 "FM4FUNParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : cexp =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
