// Implementation file for parser generated by fsyacc
module FM4FUNParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "FM4FUNParser.fsp"

open FM4FUNAST

# 10 "FM4FUNParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ASSIGN
  | SKIP
  | SEP
  | IF
  | FI
  | DO
  | OD
  | THEN
  | CONS
  | LBRA
  | RBRA
  | PLUS
  | MINUS
  | MULT
  | DIV
  | POW
  | LPAR
  | RPAR
  | TRUE
  | FALSE
  | AND
  | OR
  | SAND
  | SOR
  | NEQ
  | GEQ
  | LEQ
  | EQ
  | GT
  | LT
  | NOT
  | EOF
  | VAR of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_SEP
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_THEN
    | TOKEN_CONS
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_NEQ
    | TOKEN_GEQ
    | TOKEN_LEQ
    | TOKEN_EQ
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_NOT
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_C
    | NONTERM_GC
    | NONTERM_a
    | NONTERM_b

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ASSIGN  -> 0 
  | SKIP  -> 1 
  | SEP  -> 2 
  | IF  -> 3 
  | FI  -> 4 
  | DO  -> 5 
  | OD  -> 6 
  | THEN  -> 7 
  | CONS  -> 8 
  | LBRA  -> 9 
  | RBRA  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | MULT  -> 13 
  | DIV  -> 14 
  | POW  -> 15 
  | LPAR  -> 16 
  | RPAR  -> 17 
  | TRUE  -> 18 
  | FALSE  -> 19 
  | AND  -> 20 
  | OR  -> 21 
  | SAND  -> 22 
  | SOR  -> 23 
  | NEQ  -> 24 
  | GEQ  -> 25 
  | LEQ  -> 26 
  | EQ  -> 27 
  | GT  -> 28 
  | LT  -> 29 
  | NOT  -> 30 
  | EOF  -> 31 
  | VAR _ -> 32 
  | NUM _ -> 33 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ASSIGN 
  | 1 -> TOKEN_SKIP 
  | 2 -> TOKEN_SEP 
  | 3 -> TOKEN_IF 
  | 4 -> TOKEN_FI 
  | 5 -> TOKEN_DO 
  | 6 -> TOKEN_OD 
  | 7 -> TOKEN_THEN 
  | 8 -> TOKEN_CONS 
  | 9 -> TOKEN_LBRA 
  | 10 -> TOKEN_RBRA 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_MULT 
  | 14 -> TOKEN_DIV 
  | 15 -> TOKEN_POW 
  | 16 -> TOKEN_LPAR 
  | 17 -> TOKEN_RPAR 
  | 18 -> TOKEN_TRUE 
  | 19 -> TOKEN_FALSE 
  | 20 -> TOKEN_AND 
  | 21 -> TOKEN_OR 
  | 22 -> TOKEN_SAND 
  | 23 -> TOKEN_SOR 
  | 24 -> TOKEN_NEQ 
  | 25 -> TOKEN_GEQ 
  | 26 -> TOKEN_LEQ 
  | 27 -> TOKEN_EQ 
  | 28 -> TOKEN_GT 
  | 29 -> TOKEN_LT 
  | 30 -> TOKEN_NOT 
  | 31 -> TOKEN_EOF 
  | 32 -> TOKEN_VAR 
  | 33 -> TOKEN_NUM 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_C 
    | 3 -> NONTERM_C 
    | 4 -> NONTERM_C 
    | 5 -> NONTERM_C 
    | 6 -> NONTERM_C 
    | 7 -> NONTERM_C 
    | 8 -> NONTERM_GC 
    | 9 -> NONTERM_GC 
    | 10 -> NONTERM_a 
    | 11 -> NONTERM_a 
    | 12 -> NONTERM_a 
    | 13 -> NONTERM_a 
    | 14 -> NONTERM_a 
    | 15 -> NONTERM_a 
    | 16 -> NONTERM_a 
    | 17 -> NONTERM_a 
    | 18 -> NONTERM_a 
    | 19 -> NONTERM_a 
    | 20 -> NONTERM_b 
    | 21 -> NONTERM_b 
    | 22 -> NONTERM_b 
    | 23 -> NONTERM_b 
    | 24 -> NONTERM_b 
    | 25 -> NONTERM_b 
    | 26 -> NONTERM_b 
    | 27 -> NONTERM_b 
    | 28 -> NONTERM_b 
    | 29 -> NONTERM_b 
    | 30 -> NONTERM_b 
    | 31 -> NONTERM_b 
    | 32 -> NONTERM_b 
    | 33 -> NONTERM_b 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | SEP  -> "SEP" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | THEN  -> "THEN" 
  | CONS  -> "CONS" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | NEQ  -> "NEQ" 
  | GEQ  -> "GEQ" 
  | LEQ  -> "LEQ" 
  | EQ  -> "EQ" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | NOT  -> "NOT" 
  | EOF  -> "EOF" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEP  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 15us; 13us; 23us; 14us; 3us; 65535us; 16us; 17us; 19us; 20us; 25us; 24us; 26us; 65535us; 5us; 6us; 7us; 8us; 10us; 11us; 16us; 39us; 19us; 39us; 25us; 39us; 28us; 29us; 46us; 31us; 47us; 32us; 48us; 33us; 49us; 34us; 50us; 35us; 51us; 36us; 52us; 37us; 53us; 38us; 63us; 39us; 64us; 39us; 65us; 39us; 66us; 39us; 67us; 39us; 68us; 40us; 69us; 41us; 70us; 42us; 71us; 43us; 72us; 44us; 73us; 45us; 9us; 65535us; 16us; 22us; 19us; 22us; 25us; 22us; 53us; 62us; 63us; 57us; 64us; 58us; 65us; 59us; 66us; 60us; 67us; 61us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 38us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 5us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 6us; 2us; 13us; 14us; 15us; 16us; 18us; 1us; 3us; 6us; 3us; 13us; 14us; 15us; 16us; 18us; 1us; 3us; 1us; 3us; 6us; 3us; 13us; 14us; 15us; 16us; 18us; 1us; 4us; 2us; 5us; 5us; 2us; 5us; 8us; 1us; 5us; 1us; 6us; 2us; 6us; 9us; 1us; 6us; 1us; 7us; 2us; 7us; 9us; 1us; 7us; 5us; 8us; 22us; 23us; 24us; 25us; 1us; 8us; 2us; 9us; 9us; 1us; 9us; 1us; 10us; 2us; 11us; 12us; 1us; 12us; 6us; 12us; 13us; 14us; 15us; 16us; 18us; 1us; 12us; 6us; 13us; 13us; 14us; 15us; 16us; 18us; 6us; 13us; 14us; 14us; 15us; 16us; 18us; 6us; 13us; 14us; 15us; 15us; 16us; 18us; 6us; 13us; 14us; 15us; 16us; 16us; 18us; 6us; 13us; 14us; 15us; 16us; 17us; 18us; 6us; 13us; 14us; 15us; 16us; 18us; 18us; 6us; 13us; 14us; 15us; 16us; 18us; 19us; 12us; 13us; 14us; 15us; 16us; 18us; 19us; 27us; 28us; 29us; 30us; 31us; 32us; 11us; 13us; 14us; 15us; 16us; 18us; 27us; 28us; 29us; 30us; 31us; 32us; 6us; 13us; 14us; 15us; 16us; 18us; 27us; 6us; 13us; 14us; 15us; 16us; 18us; 28us; 6us; 13us; 14us; 15us; 16us; 18us; 29us; 6us; 13us; 14us; 15us; 16us; 18us; 30us; 6us; 13us; 14us; 15us; 16us; 18us; 31us; 6us; 13us; 14us; 15us; 16us; 18us; 32us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 2us; 19us; 33us; 1us; 19us; 1us; 20us; 1us; 21us; 5us; 22us; 22us; 23us; 24us; 25us; 5us; 22us; 23us; 23us; 24us; 25us; 5us; 22us; 23us; 24us; 24us; 25us; 5us; 22us; 23us; 24us; 25us; 25us; 5us; 22us; 23us; 24us; 25us; 26us; 5us; 22us; 23us; 24us; 25us; 33us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 14us; 21us; 23us; 30us; 32us; 34us; 41us; 43us; 46us; 49us; 51us; 53us; 56us; 58us; 60us; 63us; 65us; 71us; 73us; 76us; 78us; 80us; 83us; 85us; 92us; 94us; 101us; 108us; 115us; 122us; 129us; 136us; 143us; 156us; 168us; 175us; 182us; 189us; 196us; 203us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 227us; 229us; 231us; 233us; 239us; 245us; 251us; 257us; 263us; 269us; 271us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 291us; |]
let _fsyacc_action_rows = 75
let _fsyacc_actionTableElements = [|4us; 32768us; 1us; 12us; 3us; 16us; 5us; 19us; 32us; 4us; 0us; 49152us; 2us; 32768us; 2us; 15us; 31us; 3us; 0us; 16385us; 2us; 32768us; 0us; 5us; 9us; 7us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 5us; 16386us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 6us; 32768us; 10us; 9us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 1us; 32768us; 0us; 10us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 5us; 16387us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 0us; 16388us; 1us; 16389us; 2us; 15us; 1us; 16392us; 2us; 15us; 4us; 32768us; 1us; 12us; 3us; 16us; 5us; 19us; 32us; 4us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 2us; 32768us; 4us; 18us; 8us; 25us; 0us; 16390us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 2us; 32768us; 6us; 21us; 8us; 25us; 0us; 16391us; 5us; 32768us; 7us; 23us; 20us; 65us; 21us; 66us; 22us; 63us; 23us; 64us; 4us; 32768us; 1us; 12us; 3us; 16us; 5us; 19us; 32us; 4us; 1us; 16393us; 8us; 25us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 0us; 16394us; 1us; 16395us; 9us; 28us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 6us; 32768us; 10us; 30us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 0us; 16396us; 5us; 16397us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16398us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16399us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16400us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16401us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16402us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 6us; 32768us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 17us; 54us; 12us; 32768us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 17us; 54us; 24us; 69us; 25us; 71us; 26us; 73us; 27us; 68us; 28us; 70us; 29us; 72us; 11us; 32768us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 24us; 69us; 25us; 71us; 26us; 73us; 27us; 68us; 28us; 70us; 29us; 72us; 5us; 16411us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16412us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16413us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16414us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16415us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 5us; 16416us; 11us; 46us; 12us; 47us; 13us; 48us; 14us; 49us; 15us; 51us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 4us; 16406us; 20us; 65us; 21us; 66us; 22us; 63us; 23us; 64us; 4us; 16407us; 20us; 65us; 21us; 66us; 22us; 63us; 23us; 64us; 4us; 16408us; 20us; 65us; 21us; 66us; 22us; 63us; 23us; 64us; 4us; 16409us; 20us; 65us; 21us; 66us; 22us; 63us; 23us; 64us; 4us; 16410us; 20us; 65us; 21us; 66us; 22us; 63us; 23us; 64us; 5us; 32768us; 17us; 74us; 20us; 65us; 21us; 66us; 22us; 63us; 23us; 64us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 7us; 32768us; 12us; 50us; 16us; 53us; 18us; 55us; 19us; 56us; 30us; 67us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 4us; 32768us; 12us; 50us; 16us; 52us; 32us; 27us; 33us; 26us; 0us; 16417us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 13us; 18us; 24us; 29us; 36us; 38us; 43us; 49us; 50us; 52us; 54us; 59us; 67us; 70us; 71us; 79us; 82us; 83us; 89us; 94us; 96us; 104us; 105us; 107us; 112us; 119us; 120us; 126us; 132us; 138us; 144us; 150us; 156us; 163us; 176us; 188us; 194us; 200us; 206us; 212us; 218us; 224us; 229us; 234us; 239us; 244us; 249us; 254us; 259us; 267us; 268us; 269us; 270us; 275us; 280us; 285us; 290us; 295us; 301us; 309us; 317us; 325us; 333us; 341us; 346us; 351us; 356us; 361us; 366us; 371us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 4us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 16404us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; |]
let _fsyacc_reductions ()  =    [| 
# 301 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 310 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "FM4FUNParser.fsp"
                                                         _1 
                   )
# 36 "FM4FUNParser.fsp"
                 : cexp));
# 321 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "FM4FUNParser.fsp"
                                                         Assign(Var(_1),_3) 
                   )
# 47 "FM4FUNParser.fsp"
                 : cexp));
# 333 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "FM4FUNParser.fsp"
                                                         Assign(Array(_1,_3),_6) 
                   )
# 48 "FM4FUNParser.fsp"
                 : cexp));
# 346 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "FM4FUNParser.fsp"
                                                         Skip 
                   )
# 49 "FM4FUNParser.fsp"
                 : cexp));
# 356 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "FM4FUNParser.fsp"
                                                         C(_1,_3) 
                   )
# 50 "FM4FUNParser.fsp"
                 : cexp));
# 368 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gcexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "FM4FUNParser.fsp"
                                                         If(_2) 
                   )
# 51 "FM4FUNParser.fsp"
                 : cexp));
# 379 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gcexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "FM4FUNParser.fsp"
                                                         Do(_2) 
                   )
# 52 "FM4FUNParser.fsp"
                 : cexp));
# 390 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : cexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FM4FUNParser.fsp"
                                                         Then(_1,_3) 
                   )
# 55 "FM4FUNParser.fsp"
                 : gcexp));
# 402 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : gcexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : gcexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "FM4FUNParser.fsp"
                                                         GC(_1,_3) 
                   )
# 56 "FM4FUNParser.fsp"
                 : gcexp));
# 414 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "FM4FUNParser.fsp"
                                                         Num(_1) 
                   )
# 59 "FM4FUNParser.fsp"
                 : aexp));
# 425 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "FM4FUNParser.fsp"
                                                         V(Var(_1)) 
                   )
# 60 "FM4FUNParser.fsp"
                 : aexp));
# 436 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FM4FUNParser.fsp"
                                                         V(Array(_1,_3)) 
                   )
# 61 "FM4FUNParser.fsp"
                 : aexp));
# 448 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "FM4FUNParser.fsp"
                                                         Plus(_1,_3) 
                   )
# 62 "FM4FUNParser.fsp"
                 : aexp));
# 460 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "FM4FUNParser.fsp"
                                                         Minus(_1,_3) 
                   )
# 63 "FM4FUNParser.fsp"
                 : aexp));
# 472 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "FM4FUNParser.fsp"
                                                         Mult(_1,_3) 
                   )
# 64 "FM4FUNParser.fsp"
                 : aexp));
# 484 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "FM4FUNParser.fsp"
                                                         Div(_1,_3) 
                   )
# 65 "FM4FUNParser.fsp"
                 : aexp));
# 496 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FM4FUNParser.fsp"
                                                         UMinus(_2) 
                   )
# 66 "FM4FUNParser.fsp"
                 : aexp));
# 507 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "FM4FUNParser.fsp"
                                                         Pow(_1,_3) 
                   )
# 67 "FM4FUNParser.fsp"
                 : aexp));
# 519 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "FM4FUNParser.fsp"
                                                         _2 
                   )
# 68 "FM4FUNParser.fsp"
                 : aexp));
# 530 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "FM4FUNParser.fsp"
                                                         True 
                   )
# 71 "FM4FUNParser.fsp"
                 : bexp));
# 540 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "FM4FUNParser.fsp"
                                                         False 
                   )
# 72 "FM4FUNParser.fsp"
                 : bexp));
# 550 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "FM4FUNParser.fsp"
                                                         SAnd(_1,_3) 
                   )
# 73 "FM4FUNParser.fsp"
                 : bexp));
# 562 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "FM4FUNParser.fsp"
                                                         SOr(_1,_3) 
                   )
# 74 "FM4FUNParser.fsp"
                 : bexp));
# 574 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "FM4FUNParser.fsp"
                                                         And(_1,_3) 
                   )
# 75 "FM4FUNParser.fsp"
                 : bexp));
# 586 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "FM4FUNParser.fsp"
                                                         Or(_1,_3) 
                   )
# 76 "FM4FUNParser.fsp"
                 : bexp));
# 598 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "FM4FUNParser.fsp"
                                                         Not(_2) 
                   )
# 77 "FM4FUNParser.fsp"
                 : bexp));
# 609 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FM4FUNParser.fsp"
                                                         Eq(_1,_3) 
                   )
# 78 "FM4FUNParser.fsp"
                 : bexp));
# 621 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "FM4FUNParser.fsp"
                                                         Neq(_1,_3) 
                   )
# 79 "FM4FUNParser.fsp"
                 : bexp));
# 633 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "FM4FUNParser.fsp"
                                                         Gt(_1,_3) 
                   )
# 80 "FM4FUNParser.fsp"
                 : bexp));
# 645 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "FM4FUNParser.fsp"
                                                         Geq(_1,_3) 
                   )
# 81 "FM4FUNParser.fsp"
                 : bexp));
# 657 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "FM4FUNParser.fsp"
                                                         Lt(_1,_3) 
                   )
# 82 "FM4FUNParser.fsp"
                 : bexp));
# 669 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "FM4FUNParser.fsp"
                                                         Leq(_1,_3) 
                   )
# 83 "FM4FUNParser.fsp"
                 : bexp));
# 681 "FM4FUNParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "FM4FUNParser.fsp"
                                                         _2 
                   )
# 84 "FM4FUNParser.fsp"
                 : bexp));
|]
# 693 "FM4FUNParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : cexp =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
