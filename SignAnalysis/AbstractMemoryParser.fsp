// Open the file that defines the type "expr" we shall use as AST
%{
open AbstractMemoryAST
%}

// Declare the tokens (terminal symbols)
%token <string> VAR
%token ASSIGN SEP LBRA RBRA EOF PLUS MINUS ZERO NL

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <AbstractExpression> start
%type <AbstractExpression> AExpr
%type <AbstractExpression> AExprA
%type <AbstractAssignment> Ass
%type <AbstractAssignment> Assa
%type <AbstractArrayElem> Arr
%type <Sign> a

// Grammar productions
%%

start: AExpr EOF                  { $1 }

AExpr:
  | AExprA NL AExpr              { Abs($1,$3) }                // C ; C
  | AExprA                        { $1 }                        // (Ca)

AExprA:
  | Ass                           { AbsE($1)}

Ass:
  | Assa SEP Ass                  { AAss($1,$3) }               // C ; C
  | Assa                          { $1 }                        // (Ca)

Assa:
  | VAR ASSIGN a                  { AVar($1,$3)}
  | VAR ASSIGN LBRA a Arr         { AArr($1,AElem($4,$5)) }

Arr:
  | SEP a Arr                     { AElem($2,$3) }
  | RBRA                          { AEMP }

a:
  | PLUS                          { P }
  | MINUS                         { M }
  | ZERO                          { Z }

%%
