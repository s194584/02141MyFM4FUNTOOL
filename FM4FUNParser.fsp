// Open the file that defines the type "expr" we shall use as AST
%{
open FM4FUNAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VAR
%token ASSIGN SKIP SEP IF FI DO OD THEN CONS LBRA RBRA PLUS MINUS MULT DIV POW LPAR RPAR TRUE FALSE AND OR SAND SOR NEQ GEQ LEQ EQ GT LT NOT EOF

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <cexp> start
%type <cexp> C
%type <gcexp> GC
%type <aexp> a0
%type <bexp> b0

// Grammar productions
%%

start: C EOF                      { $1 }

C:
  | Ca SEP C                      { C($1,$3) }                // C ; C
  | Ca                            { $1 }                      // (Ca)

Ca:
  | IF GC FI                      { If($2) }                  // if GC fi
  | DO GC OD                      { Do($2) }                  // do GC od
  | VAR ASSIGN a0                 { Assign(Var($1),$3) }      // x := a0
  | VAR LBRA a0 RBRA ASSIGN a0    { Assign(Array($1,$3),$6) } // A[a0] := a0
  | SKIP                          { Skip }                    // skip
  | LPAR C RPAR                   { $2 }                      // (C)

GC:
  | GCa CONS GC                   { GC($1,$3) }               // GC [] GC
  | GCa                           { $1 }                      // (GCa)

GCa:
  | b0 THEN C                     { Then($1,$3) }             // b0 -> C
  | LPAR GC RPAR                  { $2 }                      // (GC)

// Arithmetic expressions
// Priority levels 0 | a + a , a - a
a0:
  | a0 PLUS a1                    { Plus($1,$3) }             // a0 + a0
  | a0 MINUS a1                   { Minus($1,$3) }            // a0 - a0
  | a1                            { $1 }                      // (a1)
// Priority levels 1 | a * a , a / a
a1:
  | a1 MULT a2                    { Mult($1,$3) }             // a1 * a1
  | a1 DIV a2                     { Div($1,$3) }              // a1 / a1
  | a2                            { $1 }                      // (a2)
// Priority levels 2 | a ^ a
a2:
  | a3 POW a2                     { Pow($1,$3) }              // a2 ^ a2
  | a3                            { $1 }                      // (a3)
// Priority levels 3 | -a , rest
a3:
  | NUM                           { Num($1) }                 // n
  | VAR                           { V(Var($1)) }              // x
  | VAR LBRA a0 RBRA              { V(Array($1,$3)) }         // A[a3]
  | MINUS a3                      { UMinus($2) }              // -a3
  | LPAR a0 RPAR                  { $2 }                      // (a0)

// Boolean expressions
// Priority levels 0 | b | b , b || b
b0:
  | b0 SOR b1                     { SOr($1,$3) }              // b0 || b0
  | b0 OR b1                      { Or($1,$3) }               // b0 | b0
  | b1                            { $1 }                      // (b1)
// Priority levels 1 | b & b , b && b
b1:
  | b1 SAND b2                    { SAnd($1,$3) }             // b1 && b1
  | b1 AND b2                     { And($1,$3) }              // b1 & b1
  | b2                            { $1 }                      // (b2)
// Priority levels 2 | !b , rest
b2:
  | TRUE                          { True }                    // true
  | FALSE                         { False }                   // false
  | NOT b2                        { Not($2) }                 // !b2
  | a0 EQ a0                      { Eq($1,$3) }               // a0 = a0
  | a0 NEQ a0                     { Neq($1,$3) }              // a0 != a0
  | a0 GT a0                      { Gt($1,$3) }               // a0 > a0
  | a0 GEQ a0                     { Geq($1,$3) }              // a0 >= a0
  | a0 LT a0                      { Lt($1,$3) }               // a0 < a0
  | a0 LEQ a0                     { Leq($1,$3) }              // a0 <= a0
  | LPAR b0 RPAR                  { $2 }                      // (b0)

%%
